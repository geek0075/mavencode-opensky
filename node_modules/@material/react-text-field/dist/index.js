(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("classnames"), require("@material/react-floating-label/dist/index.js"), require("@material/react-line-ripple/dist/index.js"), require("@material/react-notched-outline/dist/index.js"), require("@material/textfield/dist/mdc.textfield.js"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "classnames", "@material/react-floating-label/dist/index.js", "@material/react-line-ripple/dist/index.js", "@material/react-notched-outline/dist/index.js", "@material/textfield/dist/mdc.textfield.js"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("react"), require("classnames"), require("@material/react-floating-label/dist/index.js"), require("@material/react-line-ripple/dist/index.js"), require("@material/react-notched-outline/dist/index.js"), require("@material/textfield/dist/mdc.textfield.js")) : factory(root["react"], root["classnames"], root["@material/react-floating-label/dist/index.js"], root["@material/react-line-ripple/dist/index.js"], root["@material/react-notched-outline/dist/index.js"], root["@material/textfield/dist/mdc.textfield.js"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 93);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),

/***/ 5:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),

/***/ 6:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ }),

/***/ 7:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

/***/ }),

/***/ 8:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),

/***/ 93:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// The MIT License
//
// Copyright (c) 2018 Google, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var React = __webpack_require__(0);
var classnames = __webpack_require__(1);
// @ts-ignore no .d.ts file
var mdc_textfield_1 = __webpack_require__(8);
var Input_1 = __webpack_require__(94);
exports.Input = Input_1.default;
var index_1 = __webpack_require__(95);
exports.Icon = index_1.default;
var index_2 = __webpack_require__(96);
exports.HelperText = index_2.default;
var react_floating_label_1 = __webpack_require__(5);
var react_line_ripple_1 = __webpack_require__(6);
var react_notched_outline_1 = __webpack_require__(7);
;
;
var TextField = /** @class */ (function (_super) {
    __extends(TextField, _super);
    function TextField(props) {
        var _this = _super.call(this, props) || this;
        _this.floatingLabelElement = React.createRef();
        _this.inputComponent_ = null;
        var inputId;
        if (props.children && React.Children.only(props.children)) {
            inputId = props.children.props.id;
        }
        _this.state = {
            // root state
            value: undefined,
            classList: new Set(),
            inputId: inputId,
            isFocused: false,
            dir: 'ltr',
            disabled: false,
            // floating label state
            labelIsFloated: false,
            initialLabelWidth: 0,
            notchedLabelWidth: 0,
            // line ripple state
            activeLineRipple: false,
            lineRippleCenter: 0,
            // notched outline state
            outlineIsNotched: false,
            // helper text state
            showHelperTextToScreenReader: false,
            isValid: true,
            // foundation is on state,
            // so that the Input renders after this component
            foundation: undefined,
        };
        return _this;
    }
    TextField.prototype.componentDidMount = function () {
        var foundationMap = {
            helperText: this.helperTextAdapter,
        };
        var foundation = new mdc_textfield_1.MDCTextFieldFoundation(this.adapter, foundationMap);
        this.setState({ foundation: foundation });
        foundation.init();
    };
    TextField.prototype.componentWillUnmount = function () {
        if (this.state.foundation) {
            this.state.foundation.destroy();
        }
    };
    Object.defineProperty(TextField.prototype, "classes", {
        /**
         * getters
         */
        get: function () {
            var _a = this.state, classList = _a.classList, disabled = _a.disabled;
            var _b = this.props, className = _b.className, dense = _b.dense, outlined = _b.outlined, fullWidth = _b.fullWidth, textarea = _b.textarea, trailingIcon = _b.trailingIcon, leadingIcon = _b.leadingIcon;
            return classnames('mdc-text-field', Array.from(classList), className, {
                'mdc-text-field--outlined': outlined,
                'mdc-text-field--textarea': textarea,
                'mdc-text-field--fullwidth': fullWidth,
                'mdc-text-field--disabled': disabled,
                'mdc-text-field--with-trailing-icon': trailingIcon,
                'mdc-text-field--with-leading-icon': leadingIcon,
                'mdc-text-field--dense': dense,
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "otherProps", {
        get: function () {
            var _a = this.props, 
            /* eslint-disable no-unused-vars */
            children = _a.children, className = _a.className, dense = _a.dense, floatingLabelClassName = _a.floatingLabelClassName, fullWidth = _a.fullWidth, helperText = _a.helperText, isRtl = _a.isRtl, label = _a.label, leadingIcon = _a.leadingIcon, lineRippleClassName = _a.lineRippleClassName, notchedOutlineClassName = _a.notchedOutlineClassName, onLeadingIconSelect = _a.onLeadingIconSelect, onTrailingIconSelect = _a.onTrailingIconSelect, outlined = _a.outlined, textarea = _a.textarea, trailingIcon = _a.trailingIcon, 
            /* eslint-enable no-unused-vars */
            otherProps = __rest(_a, ["children", "className", "dense", "floatingLabelClassName", "fullWidth", "helperText", "isRtl", "label", "leadingIcon", "lineRippleClassName", "notchedOutlineClassName", "onLeadingIconSelect", "onTrailingIconSelect", "outlined", "textarea", "trailingIcon"]);
            return otherProps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "adapter", {
        get: function () {
            var _this = this;
            var rootAdapterMethods = {
                addClass: function (className) {
                    return _this.setState({ classList: _this.state.classList.add(className) });
                },
                removeClass: function (className) {
                    var classList = _this.state.classList;
                    classList.delete(className);
                    _this.setState({ classList: classList });
                },
                hasClass: function (className) { return _this.classes.split(' ').includes(className); },
                isFocused: function () { return _this.state.isFocused; },
                isRtl: function () { return _this.props.isRtl; },
            };
            return Object.assign({}, rootAdapterMethods, this.inputAdapter, this.labelAdapter, this.lineRippleAdapter, this.notchedOutlineAdapter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "inputAdapter", {
        get: function () {
            var _this = this;
            // For reference: This is the shape of what the vanilla component `getNativeInput` returns
            // {
            //  value: string,
            //  disabled: boolean, --> doesn't need to be implemented since the <INPUT> handles it
            //  also the `get disabled` isn't actually used, except in the vanilla component
            //  validity: {
            //    badInput: boolean,
            //    valid: boolean,
            //  },
            // }
            return {
                getNativeInput: function () {
                    var badInput;
                    var valid;
                    if (_this.inputComponent_) {
                        badInput = _this.inputComponent_.isBadInput();
                        valid = _this.inputComponent_.isValid();
                    }
                    var input = {
                        validity: { badInput: badInput, valid: valid },
                    };
                    // https://stackoverflow.com/a/44913378
                    Object.defineProperty(input, 'value', {
                        get: function () { return _this.state.value; },
                        // set value doesn't need to be done, since value is set via <Input>
                        // needs setter here so it browser doesn't throw error
                        set: function () { },
                    });
                    return input;
                },
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "labelAdapter", {
        get: function () {
            var _this = this;
            return {
                shakeLabel: function (shakeLabel) {
                    var floatingLabel = _this.floatingLabelElement;
                    if (!shakeLabel)
                        return;
                    if (floatingLabel && floatingLabel.current) {
                        floatingLabel.current.shake();
                    }
                },
                floatLabel: function (labelIsFloated) { return _this.setState({ labelIsFloated: labelIsFloated }); },
                hasLabel: function () { return !!_this.props.label; },
                getLabelWidth: function () { return _this.state.initialLabelWidth; },
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "lineRippleAdapter", {
        get: function () {
            var _this = this;
            return {
                activateLineRipple: function () { return _this.setState({ activeLineRipple: true }); },
                deactivateLineRipple: function () { return _this.setState({ activeLineRipple: false }); },
                setLineRippleTransformOrigin: function (lineRippleCenter) {
                    return _this.setState({ lineRippleCenter: lineRippleCenter });
                },
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "notchedOutlineAdapter", {
        get: function () {
            var _this = this;
            return {
                notchOutline: function (notchedLabelWidth) {
                    return _this.setState({ outlineIsNotched: true, notchedLabelWidth: notchedLabelWidth });
                },
                closeOutline: function () { return _this.setState({ outlineIsNotched: false }); },
                hasOutline: function () { return !!_this.props.outlined; },
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextField.prototype, "helperTextAdapter", {
        get: function () {
            var _this = this;
            return {
                showToScreenReader: function () {
                    return _this.setState({ showHelperTextToScreenReader: true });
                },
                setValidity: function (isValid) { return _this.setState({ isValid: isValid }); },
            };
        },
        enumerable: true,
        configurable: true
    });
    TextField.prototype.inputProps = function (child) {
        var _this = this;
        // ref does exist on React.ReactElement<InputProps<T>>
        // @ts-ignore
        var props = child.props, ref = child.ref;
        return Object.assign({}, props, {
            foundation: this.state.foundation,
            handleFocusChange: function (isFocused) { return _this.setState({ isFocused: isFocused }); },
            handleValueChange: function (value, cb) { return _this.setState({ value: value }, cb); },
            setDisabled: function (disabled) { return _this.setState({ disabled: disabled }); },
            setInputId: function (id) { return _this.setState({ inputId: id }); },
            ref: function (input) {
                if (typeof ref === 'function') {
                    ref(input);
                }
                _this.inputComponent_ = input;
            },
            inputType: this.props.textarea ? 'textarea' : 'input',
        });
    };
    /**
     * render methods
     */
    TextField.prototype.render = function () {
        var _a = this.props, label = _a.label, fullWidth = _a.fullWidth, helperText = _a.helperText, outlined = _a.outlined, onLeadingIconSelect = _a.onLeadingIconSelect, onTrailingIconSelect = _a.onTrailingIconSelect, leadingIcon = _a.leadingIcon, trailingIcon = _a.trailingIcon, textarea = _a.textarea;
        var foundation = this.state.foundation;
        var textField = (React.createElement("div", __assign({}, this.otherProps, { className: this.classes, onClick: function () { return foundation && foundation.handleTextFieldInteraction(); }, onKeyDown: function () { return foundation && foundation.handleTextFieldInteraction(); }, key: 'text-field-container' }),
            leadingIcon ? this.renderIcon(leadingIcon, onLeadingIconSelect) : null,
            foundation ? this.renderInput() : null,
            label && !fullWidth ? this.renderLabel() : null,
            outlined ? this.renderNotchedOutline() : null,
            !fullWidth && !textarea && !outlined ? this.renderLineRipple() : null,
            trailingIcon ? this.renderIcon(trailingIcon, onTrailingIconSelect) : null));
        if (helperText) {
            return (React.createElement(React.Fragment, null,
                textField,
                this.renderHelperText()));
        }
        return textField;
    };
    TextField.prototype.renderInput = function () {
        var child = React.Children.only(this.props.children);
        var props = this.inputProps(child);
        return React.cloneElement(child, props);
    };
    TextField.prototype.renderLabel = function () {
        var _this = this;
        var _a = this.props, label = _a.label, floatingLabelClassName = _a.floatingLabelClassName;
        var inputId = this.state.inputId;
        return (React.createElement(react_floating_label_1.default, { className: floatingLabelClassName, float: this.state.labelIsFloated, handleWidthChange: function (initialLabelWidth) {
                return _this.setState({ initialLabelWidth: initialLabelWidth });
            }, ref: this.floatingLabelElement, htmlFor: inputId }, label));
    };
    TextField.prototype.renderLineRipple = function () {
        var lineRippleClassName = this.props.lineRippleClassName;
        var _a = this.state, activeLineRipple = _a.activeLineRipple, lineRippleCenter = _a.lineRippleCenter;
        return (React.createElement(react_line_ripple_1.default, { rippleCenter: lineRippleCenter, className: lineRippleClassName, active: activeLineRipple }));
    };
    TextField.prototype.renderNotchedOutline = function () {
        var _a = this.props, isRtl = _a.isRtl, notchedOutlineClassName = _a.notchedOutlineClassName;
        var _b = this.state, outlineIsNotched = _b.outlineIsNotched, notchedLabelWidth = _b.notchedLabelWidth;
        return (React.createElement(react_notched_outline_1.default, { className: notchedOutlineClassName, isRtl: isRtl, notch: outlineIsNotched, notchWidth: notchedLabelWidth }));
    };
    TextField.prototype.renderHelperText = function () {
        var helperText = this.props.helperText;
        if (!helperText)
            return;
        var _a = this.state, isValid = _a.isValid, showToScreenReader = _a.showHelperTextToScreenReader;
        var props = Object.assign({
            showToScreenReader: showToScreenReader,
            isValid: isValid,
            key: 'text-field-helper-text',
        }, helperText.props);
        return React.cloneElement(helperText, props);
    };
    TextField.prototype.renderIcon = function (icon, onSelect) {
        var disabled = this.state.disabled;
        // Toggling disabled will trigger icon.foundation.setDisabled()
        return React.createElement(index_1.default, { disabled: disabled, onSelect: onSelect }, icon);
    };
    TextField.defaultProps = {
        className: '',
        dense: false,
        floatingLabelClassName: '',
        fullWidth: false,
        isRtl: false,
        lineRippleClassName: '',
        notchedOutlineClassName: '',
        outlined: false,
        textarea: false,
    };
    return TextField;
}(React.Component));
exports.default = TextField;


/***/ }),

/***/ 94:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// The MIT License
//
// Copyright (c) 2018 Google, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var React = __webpack_require__(0);
var classnames = __webpack_require__(1);
;
;
var VALIDATION_ATTR_WHITELIST = [
    'pattern', 'min', 'max', 'required', 'step', 'minlength', 'maxlength',
];
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.inputElement_ = React.createRef();
        _this.state = { wasUserTriggeredChange: false };
        _this.handleFocus = function (evt) {
            var _a = _this.props, foundation = _a.foundation, handleFocusChange = _a.handleFocusChange, _b = _a.onFocus, onFocus = _b === void 0 ? function () { } : _b;
            foundation.activateFocus();
            handleFocusChange(true);
            onFocus(evt);
        };
        _this.handleBlur = function (evt) {
            var _a = _this.props, foundation = _a.foundation, handleFocusChange = _a.handleFocusChange, _b = _a.onBlur, onBlur = _b === void 0 ? function () { } : _b;
            foundation.deactivateFocus();
            handleFocusChange(false);
            onBlur(evt);
        };
        _this.handleMouseDown = function (evt) {
            var _a = _this.props, foundation = _a.foundation, _b = _a.onMouseDown, onMouseDown = _b === void 0 ? function () { } : _b;
            foundation.setTransformOrigin(evt);
            onMouseDown(evt);
        };
        _this.handleTouchStart = function (evt) {
            var _a = _this.props, foundation = _a.foundation, _b = _a.onTouchStart, onTouchStart = _b === void 0 ? function () { } : _b;
            foundation.setTransformOrigin(evt);
            onTouchStart(evt);
        };
        // To stay in sync with the MDC React Text Field Component, handleValueChange()
        // is called to update MDC React Text Field's state. That state variable
        // is used to let other subcomponents and the foundation know what the current
        // value of the input is.
        _this.handleChange = function (evt) {
            var _a = _this.props, foundation = _a.foundation, _b = _a.onChange, onChange = _b === void 0 ? function () { } : _b;
            // autoCompleteFocus runs on `input` event in MDC Web. In React, onChange and
            // onInput are the same event
            // https://stackoverflow.com/questions/38256332/in-react-whats-the-difference-between-onchange-and-oninput
            foundation.autoCompleteFocus();
            _this.setState({ wasUserTriggeredChange: true });
            onChange(evt);
        };
        _this.handleValidationAttributeUpdate = function (nextProps) {
            var foundation = nextProps.foundation;
            VALIDATION_ATTR_WHITELIST.some(function (attributeName) {
                var attr;
                if (attributeName === 'minlength') {
                    attr = 'minLength';
                }
                else if (attributeName === 'maxlength') {
                    attr = 'maxLength';
                }
                else {
                    attr = attributeName;
                }
                if (_this.props[attr] !== nextProps[attr]) {
                    foundation.handleValidationAttributeChange([attributeName]);
                    return true;
                }
                return false;
            });
        };
        _this.isBadInput = function () {
            if (!_this.inputElement_.current)
                return false;
            return _this.inputElement_.current.validity.badInput;
        };
        _this.isValid = function () {
            if (!_this.inputElement_.current || _this.props.isValid !== undefined) {
                return _this.props.isValid;
            }
            return _this.inputElement_.current.validity.valid;
        };
        return _this;
    }
    Input.prototype.componentDidMount = function () {
        var _a = this.props, id = _a.id, disabled = _a.disabled, value = _a.value, setInputId = _a.setInputId, setDisabled = _a.setDisabled, handleValueChange = _a.handleValueChange, foundation = _a.foundation, isValid = _a.isValid;
        if (setInputId && id) {
            setInputId(id);
        }
        if (setDisabled && disabled) {
            setDisabled(true);
        }
        if (handleValueChange && value) {
            handleValueChange(value, function () { return foundation.setValue(value); });
        }
        if (isValid !== undefined) {
            foundation.setUseNativeValidation(false);
            foundation.setValid(isValid);
        }
    };
    Input.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        var _a = this.props, id = _a.id, handleValueChange = _a.handleValueChange, setInputId = _a.setInputId, setDisabled = _a.setDisabled, foundation = _a.foundation, value = _a.value, disabled = _a.disabled, isValid = _a.isValid;
        this.handleValidationAttributeUpdate(prevProps);
        if (disabled !== prevProps.disabled) {
            setDisabled(disabled);
            foundation.setDisabled(disabled);
        }
        if (id !== prevProps.id) {
            setInputId(id);
        }
        if (value !== prevProps.value) {
            handleValueChange(value, function () {
                // only call #foundation.setValue on programatic changes;
                // not changes by the user.
                if (_this.state.wasUserTriggeredChange) {
                    _this.setState({ wasUserTriggeredChange: false });
                }
                else {
                    foundation.setValue(value);
                }
            });
        }
        if (isValid !== prevProps.isValid) {
            if (isValid === undefined) {
                foundation.setUseNativeValidation(true);
            }
            else {
                foundation.setUseNativeValidation(false);
                foundation.setValid(isValid);
            }
        }
    };
    Object.defineProperty(Input.prototype, "classes", {
        get: function () {
            return classnames('mdc-text-field__input', this.props.className);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "inputElement", {
        get: function () {
            var element = this.inputElement_.current;
            return element ? element : null;
        },
        enumerable: true,
        configurable: true
    });
    Input.prototype.render = function () {
        var _a = this.props, inputType = _a.inputType, disabled = _a.disabled, 
        /* eslint-disable no-unused-vars */
        className = _a.className, foundation = _a.foundation, isValid = _a.isValid, value = _a.value, handleFocusChange = _a.handleFocusChange, handleValueChange = _a.handleValueChange, setDisabled = _a.setDisabled, setInputId = _a.setInputId, onFocus = _a.onFocus, onBlur = _a.onBlur, onMouseDown = _a.onMouseDown, onTouchStart = _a.onTouchStart, onChange = _a.onChange, 
        /* eslint-enable no-unused-vars */
        otherProps = __rest(_a, ["inputType", "disabled", "className", "foundation", "isValid", "value", "handleFocusChange", "handleValueChange", "setDisabled", "setInputId", "onFocus", "onBlur", "onMouseDown", "onTouchStart", "onChange"]);
        var props = Object.assign({}, {
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            onMouseDown: this.handleMouseDown,
            onTouchStart: this.handleTouchStart,
            onChange: this.handleChange,
            disabled: disabled,
            value: value,
            ref: this.inputElement_,
            className: this.classes,
        }, otherProps);
        if (inputType === 'input') {
            // https://github.com/Microsoft/TypeScript/issues/28892
            // @ts-ignore
            return (React.createElement("input", __assign({}, props)));
        }
        return (React.createElement("textarea", __assign({}, props)));
    };
    Input.defaultProps = {
        className: '',
        inputType: 'input',
        disabled: false,
        id: '',
        handleValueChange: function () { },
        setDisabled: function () { },
        setInputId: function () { },
        handleFocusChange: function () { },
        value: '',
    };
    return Input;
}(React.Component));
exports.default = Input;


/***/ }),

/***/ 95:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// The MIT License
//
// Copyright (c) 2018 Google, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var React = __webpack_require__(0);
var classnames = __webpack_require__(1);
// @ts-ignore no .d.ts file
var mdc_textfield_1 = __webpack_require__(8);
;
var Icon = /** @class */ (function (_super) {
    __extends(Icon, _super);
    function Icon(props) {
        var _this = _super.call(this, props) || this;
        _this.handleClick = function (e) {
            return _this.foundation_.handleInteraction(e);
        };
        _this.handleKeyDown = function (e) {
            return _this.foundation_.handleInteraction(e);
        };
        _this.addIconAttrsToChildren = function () {
            var _a = _this.state, tabIndex = _a.tabindex, role = _a.role;
            var child = React.Children.only(_this.props.children);
            var className = classnames('mdc-text-field__icon', child.props.className);
            var props = Object.assign({}, child.props, {
                className: className,
                onClick: _this.handleClick,
                onKeyDown: _this.handleKeyDown,
                tabIndex: tabIndex,
                role: role,
            });
            return React.cloneElement(child, props);
        };
        var role = props.children.props.role;
        _this.state = {
            tabindex: _this.tabindex,
            role: role,
        };
        return _this;
    }
    Icon.prototype.componentDidMount = function () {
        this.foundation_ = new mdc_textfield_1.MDCTextFieldIconFoundation(this.adapter);
        this.foundation_.init();
        if (this.props.disabled) {
            this.foundation_.setDisabled(true);
        }
    };
    Icon.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.disabled !== prevProps.disabled) {
            this.foundation_.setDisabled(this.props.disabled);
        }
        if (this.props.onSelect !== prevProps.onSelect) {
            this.setState({ tabindex: this.tabindex });
        }
    };
    Icon.prototype.componentWillUnmount = function () {
        if (this.foundation_) {
            this.foundation_.destroy();
        }
    };
    Object.defineProperty(Icon.prototype, "tabindex", {
        get: function () {
            // if tabIndex is not set onSelect will never fire.
            // note that foundation.js alters tabindex not tabIndex
            if (typeof this.props.children.props.tabIndex === 'number') {
                return this.props.children.props.tabIndex;
            }
            return this.props.onSelect ? 0 : -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Icon.prototype, "adapter", {
        get: function () {
            var _this = this;
            return {
                // need toString() call when tabindex === 0.
                // @types/react requires tabIndex is number
                getAttr: function (attr) {
                    var attr_ = _this.state[attr];
                    if (attr_ || (typeof attr_ === 'number' && !isNaN(attr_))) {
                        return attr_.toString();
                    }
                    return '';
                },
                setAttr: function (attr, value) { return (_this.setState(function (prevState) {
                    var _a;
                    return (__assign({}, prevState, (_a = {}, _a[attr] = value, _a)));
                })); },
                removeAttr: function (attr) { return (_this.setState(function (prevState) {
                    var _a;
                    return (__assign({}, prevState, (_a = {}, _a[attr] = null, _a)));
                })); },
                notifyIconAction: function () { return (_this.props.onSelect
                    ? _this.props.onSelect()
                    : null); },
            };
        },
        enumerable: true,
        configurable: true
    });
    Icon.prototype.render = function () {
        return this.addIconAttrsToChildren();
    };
    Icon.defaultProps = {
        disabled: false,
    };
    return Icon;
}(React.Component));
exports.default = Icon;


/***/ }),

/***/ 96:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// The MIT License
//
// Copyright (c) 2018 Google, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var React = __webpack_require__(0);
var classnames = __webpack_require__(1);
// @ts-ignore no .d.ts file
var mdc_textfield_1 = __webpack_require__(8);
;
;
var HelperText = /** @class */ (function (_super) {
    __extends(HelperText, _super);
    function HelperText(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            'aria-hidden': props['aria-hidden'],
            'role': props.role,
            'classList': new Set(),
        };
        return _this;
    }
    HelperText.prototype.componentDidMount = function () {
        this.foundation_ = new mdc_textfield_1.MDCTextFieldHelperTextFoundation(this.adapter);
        this.foundation_.init();
        if (this.props.showToScreenReader) {
            this.foundation_.showToScreenReader(true);
        }
        if (!this.props.isValid) {
            this.foundation_.setValidity(false);
        }
        if (this.props.isValidationMessage) {
            this.foundation_.setValidation(true);
        }
    };
    HelperText.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.showToScreenReader !== prevProps.showToScreenReader) {
            this.foundation_.showToScreenReader(this.props.showToScreenReader);
        }
        if (this.props.isValid !== prevProps.isValid) {
            this.foundation_.setValidity(this.props.isValid);
        }
        if (this.props.isValidationMessage !== prevProps.isValidationMessage) {
            this.foundation_.setValidation(this.props.isValidationMessage);
        }
    };
    HelperText.prototype.componentWillUnmount = function () {
        if (this.foundation_) {
            this.foundation_.destroy();
        }
    };
    Object.defineProperty(HelperText.prototype, "classes", {
        get: function () {
            var _a = this.props, className = _a.className, persistent = _a.persistent, validation = _a.validation;
            return classnames('mdc-text-field-helper-text', className, {
                'mdc-text-field-helper-text--persistent': persistent,
                'mdc-text-field-helper-text--validation-msg': validation,
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HelperText.prototype, "adapter", {
        get: function () {
            var _this = this;
            return {
                addClass: function (className) {
                    return _this.setState({ classList: _this.state.classList.add(className) });
                },
                removeClass: function (className) {
                    var classList = _this.state.classList;
                    classList.delete(className);
                    _this.setState({ classList: classList });
                },
                hasClass: function (className) { return _this.classes.split(' ').includes(className); },
                // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/26635
                setAttr: function (attr, value) { return (_this.setState(function (prevState) {
                    var _a;
                    return (__assign({}, prevState, (_a = {}, _a[attr] = value, _a)));
                })); },
                removeAttr: function (attr) { return (_this.setState(function (prevState) {
                    var _a;
                    return (__assign({}, prevState, (_a = {}, _a[attr] = null, _a)));
                })); },
            };
        },
        enumerable: true,
        configurable: true
    });
    HelperText.prototype.render = function () {
        return (React.createElement("p", { className: this.classes, role: this.state.role, "aria-hidden": this.state['aria-hidden'] }, this.props.children));
    };
    HelperText.defaultProps = {
        'aria-hidden': false,
        'className': '',
        'isValid': true,
        'isValidationMessage': false,
        'persistent': false,
        'showToScreenReader': false,
        'validation': false,
    };
    return HelperText;
}(React.Component));
exports.default = HelperText;


/***/ })

/******/ });
});
//# sourceMappingURL=text-field.js.map