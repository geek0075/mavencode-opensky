import * as React from 'react';
// @ts-ignore
import { MDCTextFieldFoundation } from '@material/textfield/dist/mdc.textfield';
export interface InputProps<T> {
    className: string;
    inputType: 'input' | 'textarea';
    disabled: boolean;
    isValid?: boolean;
    foundation?: MDCTextFieldFoundation;
    handleValueChange: (value: string | number | string[] | undefined, cb: () => void) => void;
    id: string;
    ref?: (inputInstance: Input<T>) => void;
    onBlur?: Pick<React.HTMLProps<T>, 'onBlur'>;
    onChange?: Pick<React.HTMLProps<T>, 'onChange'>;
    onFocus?: Pick<React.HTMLProps<T>, 'onFocus'>;
    onMouseDown?: Pick<React.HTMLProps<T>, 'onMouseDown'>;
    onTouchStart?: Pick<React.HTMLProps<T>, 'onTouchStart'>;
    setDisabled: (disabled: boolean) => void;
    setInputId: (id: string | number) => void;
    handleFocusChange: (isFocused: boolean) => void;
}
declare type InputElementProps = Exclude<React.HTMLProps<HTMLInputElement>, 'ref'>;
declare type TextareaElementProps = Exclude<React.HTMLProps<HTMLTextAreaElement>, 'ref'>;
declare type Props<T> = InputProps<T> & (T extends HTMLInputElement ? InputElementProps : TextareaElementProps);
interface InputState {
    wasUserTriggeredChange: boolean;
}
export default class Input<T extends {}> extends React.Component<Props<T>, InputState> {
    inputElement_: React.RefObject<T extends HTMLInputElement ? HTMLInputElement : HTMLTextAreaElement>;
    static defaultProps: {
        className: string;
        inputType: string;
        disabled: boolean;
        id: string;
        handleValueChange: () => void;
        setDisabled: () => void;
        setInputId: () => void;
        handleFocusChange: () => void;
        value: string;
    };
    state: {
        wasUserTriggeredChange: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: Props<T>): void;
    readonly classes: string;
    readonly inputElement: (T extends HTMLInputElement ? HTMLInputElement : HTMLTextAreaElement) | null;
    handleFocus: (evt: React.FocusEvent<T extends HTMLInputElement ? HTMLInputElement : HTMLTextAreaElement>) => void;
    handleBlur: (evt: React.FocusEvent<T extends HTMLInputElement ? HTMLInputElement : HTMLTextAreaElement>) => void;
    handleMouseDown: (evt: React.MouseEvent<T extends HTMLInputElement ? HTMLInputElement : HTMLTextAreaElement>) => void;
    handleTouchStart: (evt: React.TouchEvent<T extends HTMLInputElement ? HTMLInputElement : HTMLTextAreaElement>) => void;
    handleChange: (evt: React.FormEvent<T extends HTMLInputElement ? HTMLInputElement : HTMLTextAreaElement>) => void;
    handleValidationAttributeUpdate: (nextProps: Props<T>) => void;
    isBadInput: () => boolean;
    isValid: () => boolean | Props<T>["isValid"] | undefined;
    render(): JSX.Element;
}
export {};
