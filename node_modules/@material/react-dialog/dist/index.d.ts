import * as React from 'react';
// @ts-ignore
import { MDCDialogFoundation, MDCDialogAdapter } from '@material/dialog/dist/mdc.dialog';
import DialogContent, { DialogContentProps } from './DialogContent';
import DialogFooter, { DialogFooterProps } from './DialogFooter';
import DialogTitle, { DialogTitleProps } from './DialogTitle';
import DialogButton from './DialogButton';
import { FocusTrap } from 'focus-trap';
export declare type ChildTypes = (DialogTitle<DialogTitleProps<{}>> | DialogContent<DialogContentProps<{}>> | DialogFooter<DialogFooterProps<{}>>);
export interface DialogProps<T, TitleProps extends {} = DialogTitleProps<HTMLHeadingElement>, ContentProps extends {} = DialogContentProps<HTMLDivElement>, FooterProps extends {} = DialogFooterProps<HTMLElement>> extends React.HTMLProps<T> {
    autoStackButtons?: boolean;
    children?: ((React.ReactElement<TitleProps> | React.ReactElement<ContentProps> | React.ReactElement<FooterProps>)[] | React.ReactElement<FooterProps> | React.ReactElement<ContentProps> | React.ReactElement<TitleProps>);
    className?: string;
    escapeKeyAction?: string;
    id?: string;
    onClose?: (action: string) => void;
    onClosing?: (action: string) => void;
    onOpen?: () => void;
    onOpening?: () => void;
    open?: boolean;
    role?: 'alertdialog' | 'dialog';
    scrimClickAction?: string;
    tag?: string;
}
interface DialogState {
    classList: Set<string>;
}
declare class Dialog<T extends {} = HTMLElement> extends React.Component<DialogProps<T>, DialogState> {
    focusTrap?: FocusTrap;
    foundation: MDCDialogFoundation;
    dialogElement: React.RefObject<HTMLElement>;
    labelledBy?: string;
    describedBy?: string;
    static defaultProps: Partial<DialogProps<HTMLElement>>;
    state: DialogState;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: DialogProps<T>): any;
    readonly classes: string;
    readonly buttons: HTMLButtonElement[];
    readonly content: HTMLElement | null;
    readonly defaultButton: HTMLButtonElement | null;
    private open;
    private initializeFocusTrap;
    readonly adapter: Partial<MDCDialogAdapter>;
    handleOpening: () => void;
    handleClosing: (action: string) => void;
    handleInteraction: (e: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => void;
    handleDocumentKeyDown: (e: Event) => void;
    handleLayout: () => void;
    render(): JSX.Element;
    renderContainer: (children?: (React.ReactElement<DialogTitleProps<{}>> | React.ReactElement<DialogContentProps<{}>> | React.ReactElement<DialogFooterProps<{}>>)[] | undefined) => React.ReactElement<HTMLDivElement> | undefined;
    renderChild: (child: React.ReactElement<DialogTitleProps<{}>> | React.ReactElement<DialogContentProps<{}>> | React.ReactElement<DialogFooterProps<{}>>, i: number) => React.ReactElement<DialogTitleProps<{}>> | React.ReactElement<DialogContentProps<{}>> | React.ReactElement<DialogFooterProps<{}>>;
    setId: (child: React.ReactElement<DialogTitleProps<{}>> | React.ReactElement<DialogContentProps<{}>> | React.ReactElement<DialogFooterProps<{}>>, componentId?: string | undefined) => string;
}
export default Dialog;
export { DialogTitle, DialogContent, DialogFooter, DialogButton, };
